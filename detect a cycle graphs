
// code using bfs approach 
class Pair {
    int first;
    int second;
    public Pair(int first, int second) {
        this.first = first;
        this.second = second;
    }
}
class Solution {
    public boolean checkForcycle(int src , int V, ArrayList<ArrayList<Integer>> adj, boolean[] vis) {
        vis[src] = true;
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(src, -1));
        while(!q.isEmpty()) {
            int node = q.peek().first;
            int parent = q.peek().second;
            q.remove();
            
            for(int adjacentnode : adj.get(node)) {
                if(vis[adjacentnode] == false){
                    vis[adjacentnode] = true;
                    q.add(new Pair(adjacentnode, node));
                } else if(parent != adjacentnode) {
                    return true;
                }
            }
        }
        return false;
    }
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean vis[] = new boolean[V];
        for(int i = 0; i < V; i++) {
            vis[i] = false;
        }
        for(int i = 0; i< V; i++) {
            if(vis[i] == false) {
                if(checkForcycle(i, V, adj, vis)) return true;
            }
        }
        return false;
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// using the dfs approach

class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean dfs(int node, int parent, boolean[] vis, ArrayList<ArrayList<Integer>> adj) {
        vis[node] = true;
        for(int adjacent : adj.get(node)) {
            if(vis[adjacent] == false) {
                if(dfs(adjacent, node, vis, adj)) return true;
            }
            else if(parent != adjacent) return true;
        }
        return false;
    }
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean vis[] = new boolean[V];
        for(int i = 0; i< V; i++)vis[i] = false;
        for(int i = 0; i < V; i++) {
            if(vis[i] == false) {
                if(dfs(i, -1, vis, adj)) return true;
            }
        }
        return false;
    }
}
