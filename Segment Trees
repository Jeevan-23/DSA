#include <bits/stdc++.h>
using namespace std;

class Range_Sum_Segment_Tree
{
    vector<int> tree;
    int n;

public:
    Range_Sum_Segment_Tree(int n)
    {
        this->n = n;
        tree.resize(4 * n);
    }

    void buildtree(vector<int> &arr, int start, int end, int index)
    {
        if (start == end)
        {
            tree[index] = arr[start];
            return;
        }
        int mid = start + (end - start) / 2;
        buildtree(arr, start, mid, 2 * index);
        buildtree(arr, mid + 1, end, 2 * index + 1);
        tree[index] = tree[2 * index] + tree[2 * index + 1];
    }

    int findsum(int start, int end, int l, int r, int index)
    {
        if (l > end || r < start)
            return 0;
        if (l <= start && r >= end)
            return tree[index];
        int mid = start + (end - start) / 2;
        return findsum(start, mid, l, r, 2 * index) + findsum(mid + 1, end, l, r, 2 * index + 1);
    }

    void update(int start, int end, int index, int pos, int val)
    {
        if (start == end)
        {
            tree[index] = val;
            return;
        }
        int mid = start + (end - start) / 2;
        if (pos <= mid)
            update(start, mid, 2 * index, pos, val);
        else
            update(mid + 1, end, 2 * index + 1, pos, val);
        tree[index] = tree[2 * index] + tree[2 * index + 1];
    }
};

class Range_Min_Segment_Tree
{
    vector<int> tree;
    int n;

public:
    Range_Min_Segment_Tree(int n)
    {
        this->n = n;
        tree.resize(4 * n);
    }

    void buildtree(vector<int> &arr, int start, int end, int index)
    {
        if (start == end)
        {
            tree[index] = arr[start];
            return;
        }
        int mid = start + (end - start) / 2;
        buildtree(arr, start, mid, 2 * index);
        buildtree(arr, mid + 1, end, 2 * index + 1);
        tree[index] = min(tree[2 * index], tree[2 * index + 1]);
    }
    int findmin(int start, int end, int l, int r, int index)
    {
        if (l > end || r < start)
            return INT_MAX;

        if (l <= start && r >= end)
        {
            return tree[index];
        }
        int mid = start + (end - start) / 2;
        return min(findmin(start, mid, l, r, 2 * index), findmin(mid + 1, end, l, r, 2 * index + 1));
    }

    void update(int start, int end, int index, int pos, int val)
    {
        if (start == end)
        {
            tree[index] = val;
            return;
        }
        int mid = start + (end - start) / 2;
        if (pos <= mid)
            update(start, mid, 2 * index, pos, val);
        else
            update(mid + 1, end, 2 * index + 1, pos, val);
        tree[index] = min(tree[2 * index], tree[2 * index + 1]);
    }
};

class Lazy_Propagation_Segment_Tree
{
    vector<int> tree;
    vector<int> lazy;
    int n;

public:
    Lazy_Propagation_Segment_Tree(int n)
    {
        this->n = n;
        tree.resize(4 * n);
        lazy.resize(4 * n);
    }

    void buildtree(vector<int> &arr, int start, int end, int index)
    {
        if (start == end)
        {
            tree[index] = arr[start];
            return;
        }
        int mid = start + (end - start) / 2;
        buildtree(arr, start, mid, 2 * index);
        buildtree(arr, mid + 1, end, 2 * index + 1);
        tree[index] = tree[2 * index] + tree[2 * index + 1];
    }

    void update(int start, int end, int l, int r, int index, int val)
    {
        if (lazy[index] != 0)
        {
            tree[index] += (end - start + 1) * lazy[index];
            if (start != end)
            {
                lazy[2 * index] += lazy[index];
                lazy[2 * index + 1] += lazy[index];
            }
            lazy[index] = 0;
        }
        if (l > end || r < start)
            return;
        if (l <= start && r >= end)
        {
            tree[index] += (end - start + 1) * val;
            if (start != end)
            {
                lazy[2 * index] += val;
                lazy[2 * index + 1] += val;
            }
            return;
        }
        int mid = start + (end - start) / 2;
        update(start, mid, l, r, 2 * index, val);
        update(mid + 1, end, l, r, 2 * index + 1, val);
        tree[index] = tree[2 * index] + tree[2 * index + 1];
    }

    int findsum(int start, int end, int l, int r, int index)
    {
        if (lazy[index] != 0)
        {
            tree[index] += (end - start + 1) * lazy[index];
            if (start != end)
            {
                lazy[2 * index] += lazy[index];
                lazy[2 * index + 1] += lazy[index];
            }
            lazy[index] = 0;
        }
        if (l > end || r < start)
            return;
        if (l <= start && r >= end)
        {
            return tree[index];
        }
        int mid = start + (end - start) / 2;
        return findsum(start, mid, l, r, 2 * index) + findsum(mid + 1, end, l, r, 2 * index + 1);
    }
};

int main()
{
    vector<int> arr = {1, 3, 5, 7, 9, 11};
    Range_Sum_Segment_Tree sum_tree(arr.size());
    sum_tree.buildtree(arr, 0, arr.size() - 1, 1);
    cout << sum_tree.findsum(0, arr.size() - 1, 1, 3, 1) << endl;
    sum_tree.update(0, arr.size() - 1, 1, 2, 10);
    cout << sum_tree.findsum(0, arr.size() - 1, 1, 3, 1) << endl;

    Range_Min_Segment_Tree min_tree(arr.size());
    min_tree.buildtree(arr, 0, arr.size() - 1, 1);
    cout << min_tree.findmin(0, arr.size() - 1, 1, 3, 1) << endl;
    min_tree.update(0, arr.size() - 1, 1, 1, 10);
    cout << min_tree.findmin(0, arr.size() - 1, 1, 4, 1) << endl;
    return 0;
}
