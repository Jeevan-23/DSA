#include<bits/stdc++.h>
using namespace std;

class Disjointset {
vector<int> rank, parent, size;
    public:

    Disjointset(int n) {
        rank.resize(n+1);
        parent.resize(n+1);
        size.resize(n+1);
        for(int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findpar(int a) {
        if(a == parent[a]) {
            return a;
        }
        return parent[a] = findpar(parent[a]);
    }

    void unionbyrank(int a, int b) {
        int ulp_a = findpar(a);
        int ulp_b = findpar(b);

        if(ulp_a == ulp_b) {
            return;
        }
        if(rank[ulp_a] > rank[ulp_b]) {
            parent[ulp_b] = ulp_a;
        }
        else if(rank[ulp_b] > rank[ulp_a]) {
            parent[ulp_a] = ulp_b;
        }
        else {
            parent[ulp_b] = ulp_a;
            rank[ulp_a]++;
        }
    }

    void unionBySize(int a, int b) {
        int ulp_a = findpar(a);
        int ulp_b = findpar(b);

        if(ulp_a == ulp_b) {
            return;
        }
        
        if(size[ulp_a] > size[ulp_b]) {
            parent[ulp_b] = ulp_a;
            size[ulp_a] += size[ulp_b];
        }
        else if(size[ulp_b] > size[ulp_a]) {
            parent[ulp_a] = ulp_b;
            size[ulp_b] += size[ulp_a];
        }
        else {
            parent[ulp_b] = ulp_a;
            size[ulp_a] += size[ulp_b];
        }
    }

};

int main() {
    Disjointset ds(7);
    ds.unionbyrank(1, 2); 
    ds.unionbyrank(2, 3); 
    ds.unionbyrank(4, 5); 
    ds.unionbyrank(6, 7); 
    ds.unionbyrank(5, 6); 
    // if 3 and 7 same or not 
    if(ds.findpar(3) == ds.findpar(7)) {
        cout << "Same\n"; 
    }
    else cout << "Not same\n"; 

    ds.unionbyrank(3, 7); 

    if(ds.findpar(3) == ds.findpar(7)) {
        cout << "Same\n"; 
    }
    else cout << "Not same\n"; 
	return 0;
}
